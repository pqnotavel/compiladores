# Declaração de Variáveis #

a = 'teste' #string
b = 1 # number
c = [1, 2, 3] #array
d = {
    key: 'value' # object
}

e = [x for x in b if b > 2] # array created using a loop and a instant var, a instant var is a variable created as a subproduct of a loop in this case X

# Logic operators
! # negate
# the above is a shorthand for that is navtive from python
condition is not True 
or # or
and # nad 

# Math operators
> < # greater and lesser
+ - / * # basics
ˆ # pow

# Loops #

# Every loopis aways iterating through something the only loop supported on the language is the for loop
# It can be used iterating through a array with use of the indicator in
for x in c:
# Or can be used to iterate to a number with the use of the indicator to
for x to 10:
# When using this kind of iterator, if the variable ins't declared on the scope it will start at 0. You could instead start on a different number by doing something like that
for x = 2 to 10:
# or
x = 2
for x to 10:

# if you wish to capture the current index, you should use a second variable like that
for x, index in c:
for x, index to 10:



# Conditionals #

if condition:
if x > 2:
# where the condition involves a test that is a boolean, if test is complex or maybe reused somewhereelse the condition should be the return of a function
# the default behaviour is condition == true, so you will not ever need to do domethign like that
if condition == true:
# if you wish to verify if the condition is false just use the ! nagate logit operator 
elif:
else:

# Functions #

# A function declartion starts with a def, followed by a list of args

def myFunction():

# A anonymous function can be used if it is been used inside of another sctructure or a callback function

e = b.filter((x, index) => {
    return x > 2
}) 

# If you have just one arg on the callback function you could sinplify to somethign like that

e = b.filter(x => x > 2)

# That is doing the same thing as above
# If the only instruction inside of your anonymous function is a return you could omit the return keyword



def torrada(arg1):
    """TODO: Docstring for functionfunction.

    :arg1: TODO
    :returns: TODO

    """
    pass
